{"uid":"7b16b595843644f6","name":"test_scenario_1_and_3_create_and_delete_status_and_priority","fullName":"tests.test_scenario_1_3#test_scenario_1_and_3_create_and_delete_status_and_priority","historyId":"98a82fa1dbea84abe6ae62242d9718b0","time":{"start":1713932083758,"stop":1713932126278,"duration":42520},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=124.0.6367.62)\nStacktrace:\n0   chromedriver                        0x00000001032b28dc chromedriver + 4368604\n1   chromedriver                        0x00000001032aad70 chromedriver + 4337008\n2   chromedriver                        0x0000000102ecec04 chromedriver + 289796\n3   chromedriver                        0x0000000102ea9918 chromedriver + 137496\n4   chromedriver                        0x0000000102f35ab8 chromedriver + 711352\n5   chromedriver                        0x0000000102f48d08 chromedriver + 789768\n6   chromedriver                        0x0000000102f05ab4 chromedriver + 514740\n7   chromedriver                        0x0000000102f0650c chromedriver + 517388\n8   chromedriver                        0x0000000103276df8 chromedriver + 4124152\n9   chromedriver                        0x000000010327bbe8 chromedriver + 4144104\n10  chromedriver                        0x000000010325c7c0 chromedriver + 4016064\n11  chromedriver                        0x000000010327c518 chromedriver + 4146456\n12  chromedriver                        0x000000010324e274 chromedriver + 3957364\n13  chromedriver                        0x000000010329be60 chromedriver + 4275808\n14  chromedriver                        0x000000010329bfdc chromedriver + 4276188\n15  chromedriver                        0x00000001032aa9d0 chromedriver + 4336080\n16  libsystem_pthread.dylib             0x0000000181a62f94 _pthread_start + 136\n17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9287f6a315e6fd06c13806ac49d4cad6\")>\n\n    @allure.feature('Test Scenario 1 and 3')\n    def test_scenario_1_and_3_create_and_delete_status_and_priority(driver):\n        try:\n            num = 1123\n            status_name = 'Issue Created'+str(num)\n            priority_name = \"Assistance required\"+str(num)\n    \n            driver.get(\"https://interview2.supporthive.com/staff/\")\n    \n            login = LoginScreenObject(driver)\n    \n            # login and retrieve OTP from email\n    \n            login.username_and_password_login(os.getenv(\"USERNAME\"), os.getenv(\"PASSWORD\"))\n            login.wait_for_resend_otp_button()\n            driver.execute_script(\"window.open('https://mail.google.com/','_blank');\")\n            driver.switch_to.window(driver.window_handles[1])\n>           email_otp = retrieve_otp_from_email(driver)\n\ntest_scenario_1_3.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../utilities/otp.py:16: in retrieve_otp_from_email\n    driver.find_element(By.CSS_SELECTOR, \"input[type='password']\").send_keys(password)\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1064b48b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...000181a62f94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=124.0.6367.62)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001032b28dc chromedriver + 4368604\nE       1   chromedriver                        0x00000001032aad70 chromedriver + 4337008\nE       2   chromedriver                        0x0000000102ecec04 chromedriver + 289796\nE       3   chromedriver                        0x0000000102ea9918 chromedriver + 137496\nE       4   chromedriver                        0x0000000102f35ab8 chromedriver + 711352\nE       5   chromedriver                        0x0000000102f48d08 chromedriver + 789768\nE       6   chromedriver                        0x0000000102f05ab4 chromedriver + 514740\nE       7   chromedriver                        0x0000000102f0650c chromedriver + 517388\nE       8   chromedriver                        0x0000000103276df8 chromedriver + 4124152\nE       9   chromedriver                        0x000000010327bbe8 chromedriver + 4144104\nE       10  chromedriver                        0x000000010325c7c0 chromedriver + 4016064\nE       11  chromedriver                        0x000000010327c518 chromedriver + 4146456\nE       12  chromedriver                        0x000000010324e274 chromedriver + 3957364\nE       13  chromedriver                        0x000000010329be60 chromedriver + 4275808\nE       14  chromedriver                        0x000000010329bfdc chromedriver + 4276188\nE       15  chromedriver                        0x00000001032aa9d0 chromedriver + 4336080\nE       16  libsystem_pthread.dylib             0x0000000181a62f94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8\n\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9287f6a315e6fd06c13806ac49d4cad6\")>\n\n    @allure.feature('Test Scenario 1 and 3')\n    def test_scenario_1_and_3_create_and_delete_status_and_priority(driver):\n        try:\n            num = 1123\n            status_name = 'Issue Created'+str(num)\n            priority_name = \"Assistance required\"+str(num)\n    \n            driver.get(\"https://interview2.supporthive.com/staff/\")\n    \n            login = LoginScreenObject(driver)\n    \n            # login and retrieve OTP from email\n    \n            login.username_and_password_login(os.getenv(\"USERNAME\"), os.getenv(\"PASSWORD\"))\n            login.wait_for_resend_otp_button()\n            driver.execute_script(\"window.open('https://mail.google.com/','_blank');\")\n            driver.switch_to.window(driver.window_handles[1])\n            email_otp = retrieve_otp_from_email(driver)\n            driver.close()\n            driver.switch_to.window(driver.window_handles[0])\n            login.enter_otp(email_otp)\n            login.final_login()\n    \n            # create and delete Status\n    \n            status_screen = CreateStatus(driver)\n            status_screen.create_status(status_name)\n            status_screen.view_ticket(status_name)\n            status_screen.delete_link()\n            status_screen.delete_button()\n            status_screen.delete_confirmation()\n    \n            # Create and delete Priority\n    \n            priority_screen = CreatePriority(driver)\n            priority_screen.create_priority(priority_name)\n            priority_screen.view_ticket(priority_name)\n            priority_screen.delete_link()\n            priority_screen.delete_button()\n            priority_screen.delete_confirmation()\n    \n            login.logout()\n    \n        except Exception as e:\n>           DriverHandlers(driver).allure_exception(e)\n\ntest_scenario_1_3.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../utilities/driverhandlers.py:35: in allure_exception\n    self.add_images_to_allure_report(\"Failed Image\")\n../utilities/driverhandlers.py:28: in add_images_to_allure_report\n    self.driver.get_screenshot_as_png(),\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:832: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:843: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1064b48b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...000181a62f94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=124.0.6367.62)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001032b28dc chromedriver + 4368604\nE       1   chromedriver                        0x00000001032aad70 chromedriver + 4337008\nE       2   chromedriver                        0x0000000102ecec04 chromedriver + 289796\nE       3   chromedriver                        0x0000000102ea9918 chromedriver + 137496\nE       4   chromedriver                        0x0000000102f35ab8 chromedriver + 711352\nE       5   chromedriver                        0x0000000102f48d08 chromedriver + 789768\nE       6   chromedriver                        0x0000000102f05ab4 chromedriver + 514740\nE       7   chromedriver                        0x0000000102f0650c chromedriver + 517388\nE       8   chromedriver                        0x0000000103276df8 chromedriver + 4124152\nE       9   chromedriver                        0x000000010327bbe8 chromedriver + 4144104\nE       10  chromedriver                        0x000000010325c7c0 chromedriver + 4016064\nE       11  chromedriver                        0x000000010327c518 chromedriver + 4146456\nE       12  chromedriver                        0x000000010324e274 chromedriver + 3957364\nE       13  chromedriver                        0x000000010329be60 chromedriver + 4275808\nE       14  chromedriver                        0x000000010329bfdc chromedriver + 4276188\nE       15  chromedriver                        0x00000001032aa9d0 chromedriver + 4336080\nE       16  libsystem_pthread.dylib             0x0000000181a62f94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8\n\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1713932082124,"stop":1713932083757,"duration":1633},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=124.0.6367.62)\nStacktrace:\n0   chromedriver                        0x00000001032b28dc chromedriver + 4368604\n1   chromedriver                        0x00000001032aad70 chromedriver + 4337008\n2   chromedriver                        0x0000000102ecec04 chromedriver + 289796\n3   chromedriver                        0x0000000102ea9918 chromedriver + 137496\n4   chromedriver                        0x0000000102f35ab8 chromedriver + 711352\n5   chromedriver                        0x0000000102f48d08 chromedriver + 789768\n6   chromedriver                        0x0000000102f05ab4 chromedriver + 514740\n7   chromedriver                        0x0000000102f0650c chromedriver + 517388\n8   chromedriver                        0x0000000103276df8 chromedriver + 4124152\n9   chromedriver                        0x000000010327bbe8 chromedriver + 4144104\n10  chromedriver                        0x000000010325c7c0 chromedriver + 4016064\n11  chromedriver                        0x000000010327c518 chromedriver + 4146456\n12  chromedriver                        0x000000010324e274 chromedriver + 3957364\n13  chromedriver                        0x000000010329be60 chromedriver + 4275808\n14  chromedriver                        0x000000010329bfdc chromedriver + 4276188\n15  chromedriver                        0x00000001032aa9d0 chromedriver + 4336080\n16  libsystem_pthread.dylib             0x0000000181a62f94 _pthread_start + 136\n17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9287f6a315e6fd06c13806ac49d4cad6\")>\n\n    @allure.feature('Test Scenario 1 and 3')\n    def test_scenario_1_and_3_create_and_delete_status_and_priority(driver):\n        try:\n            num = 1123\n            status_name = 'Issue Created'+str(num)\n            priority_name = \"Assistance required\"+str(num)\n    \n            driver.get(\"https://interview2.supporthive.com/staff/\")\n    \n            login = LoginScreenObject(driver)\n    \n            # login and retrieve OTP from email\n    \n            login.username_and_password_login(os.getenv(\"USERNAME\"), os.getenv(\"PASSWORD\"))\n            login.wait_for_resend_otp_button()\n            driver.execute_script(\"window.open('https://mail.google.com/','_blank');\")\n            driver.switch_to.window(driver.window_handles[1])\n>           email_otp = retrieve_otp_from_email(driver)\n\ntest_scenario_1_3.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../utilities/otp.py:16: in retrieve_otp_from_email\n    driver.find_element(By.CSS_SELECTOR, \"input[type='password']\").send_keys(password)\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1064b48b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...000181a62f94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=124.0.6367.62)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001032b28dc chromedriver + 4368604\nE       1   chromedriver                        0x00000001032aad70 chromedriver + 4337008\nE       2   chromedriver                        0x0000000102ecec04 chromedriver + 289796\nE       3   chromedriver                        0x0000000102ea9918 chromedriver + 137496\nE       4   chromedriver                        0x0000000102f35ab8 chromedriver + 711352\nE       5   chromedriver                        0x0000000102f48d08 chromedriver + 789768\nE       6   chromedriver                        0x0000000102f05ab4 chromedriver + 514740\nE       7   chromedriver                        0x0000000102f0650c chromedriver + 517388\nE       8   chromedriver                        0x0000000103276df8 chromedriver + 4124152\nE       9   chromedriver                        0x000000010327bbe8 chromedriver + 4144104\nE       10  chromedriver                        0x000000010325c7c0 chromedriver + 4016064\nE       11  chromedriver                        0x000000010327c518 chromedriver + 4146456\nE       12  chromedriver                        0x000000010324e274 chromedriver + 3957364\nE       13  chromedriver                        0x000000010329be60 chromedriver + 4275808\nE       14  chromedriver                        0x000000010329bfdc chromedriver + 4276188\nE       15  chromedriver                        0x00000001032aa9d0 chromedriver + 4336080\nE       16  libsystem_pthread.dylib             0x0000000181a62f94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8\n\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9287f6a315e6fd06c13806ac49d4cad6\")>\n\n    @allure.feature('Test Scenario 1 and 3')\n    def test_scenario_1_and_3_create_and_delete_status_and_priority(driver):\n        try:\n            num = 1123\n            status_name = 'Issue Created'+str(num)\n            priority_name = \"Assistance required\"+str(num)\n    \n            driver.get(\"https://interview2.supporthive.com/staff/\")\n    \n            login = LoginScreenObject(driver)\n    \n            # login and retrieve OTP from email\n    \n            login.username_and_password_login(os.getenv(\"USERNAME\"), os.getenv(\"PASSWORD\"))\n            login.wait_for_resend_otp_button()\n            driver.execute_script(\"window.open('https://mail.google.com/','_blank');\")\n            driver.switch_to.window(driver.window_handles[1])\n            email_otp = retrieve_otp_from_email(driver)\n            driver.close()\n            driver.switch_to.window(driver.window_handles[0])\n            login.enter_otp(email_otp)\n            login.final_login()\n    \n            # create and delete Status\n    \n            status_screen = CreateStatus(driver)\n            status_screen.create_status(status_name)\n            status_screen.view_ticket(status_name)\n            status_screen.delete_link()\n            status_screen.delete_button()\n            status_screen.delete_confirmation()\n    \n            # Create and delete Priority\n    \n            priority_screen = CreatePriority(driver)\n            priority_screen.create_priority(priority_name)\n            priority_screen.view_ticket(priority_name)\n            priority_screen.delete_link()\n            priority_screen.delete_button()\n            priority_screen.delete_confirmation()\n    \n            login.logout()\n    \n        except Exception as e:\n>           DriverHandlers(driver).allure_exception(e)\n\ntest_scenario_1_3.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../utilities/driverhandlers.py:35: in allure_exception\n    self.add_images_to_allure_report(\"Failed Image\")\n../utilities/driverhandlers.py:28: in add_images_to_allure_report\n    self.driver.get_screenshot_as_png(),\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:832: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:843: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1064b48b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...000181a62f94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=124.0.6367.62)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001032b28dc chromedriver + 4368604\nE       1   chromedriver                        0x00000001032aad70 chromedriver + 4337008\nE       2   chromedriver                        0x0000000102ecec04 chromedriver + 289796\nE       3   chromedriver                        0x0000000102ea9918 chromedriver + 137496\nE       4   chromedriver                        0x0000000102f35ab8 chromedriver + 711352\nE       5   chromedriver                        0x0000000102f48d08 chromedriver + 789768\nE       6   chromedriver                        0x0000000102f05ab4 chromedriver + 514740\nE       7   chromedriver                        0x0000000102f0650c chromedriver + 517388\nE       8   chromedriver                        0x0000000103276df8 chromedriver + 4124152\nE       9   chromedriver                        0x000000010327bbe8 chromedriver + 4144104\nE       10  chromedriver                        0x000000010325c7c0 chromedriver + 4016064\nE       11  chromedriver                        0x000000010327c518 chromedriver + 4146456\nE       12  chromedriver                        0x000000010324e274 chromedriver + 3957364\nE       13  chromedriver                        0x000000010329be60 chromedriver + 4275808\nE       14  chromedriver                        0x000000010329bfdc chromedriver + 4276188\nE       15  chromedriver                        0x00000001032aa9d0 chromedriver + 4336080\nE       16  libsystem_pthread.dylib             0x0000000181a62f94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x0000000181a5dd34 thread_start + 8\n\n../../../venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException","steps":[],"attachments":[{"uid":"5ab68e53e97409c5","name":"Exception","source":"5ab68e53e97409c5.txt","type":"text/plain","size":1606},{"uid":"5de07d16118a020d","name":"log","source":"5de07d16118a020d.txt","type":"text/plain","size":139}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1713932126314,"stop":1713932126414,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"labels":[{"name":"feature","value":"Test Scenario 1 and 3"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_scenario_1_3"},{"name":"host","value":"Alfreds-MacBook-Pro.local"},{"name":"thread","value":"84841-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_scenario_1_3"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7b16b595843644f6.json","parameterValues":[]}